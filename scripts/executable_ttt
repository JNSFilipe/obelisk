#!/usr/bin/bash
# Stolen from https://github.com/omerxx/tmux-sessionx/blob/main/scripts/sessionx.sh

CURRENT="$(tmux display-message -p '#S')"
Z_MODE="off"

tmux_option_or_fallback() {
	local option_value
	option_value="$(tmux show-option -gqv "$1")"
	if [ -z "$option_value" ]; then
		option_value="$2"
	fi
	echo "$option_value"
}

preview_settings() {
    default_window_mode=$(tmux_option_or_fallback "@sessionx-window-mode" "off")
    if [[ "$default_window_mode" == "on" ]]; then
        PREVIEW_OPTIONS="-w"
    fi
    preview_location=$(tmux_option_or_fallback "@sessionx-preview-location" "right")
    preview_ratio=$(tmux_option_or_fallback "@sessionx-preview-ratio" "50%")
}

window_settings() {
    window_height=$(tmux_option_or_fallback "@sessionx-window-height" "100%")
    window_width=$(tmux_option_or_fallback "@sessionx-window-width" "100%")
}

handle_binds() {
  bind_tree_mode=$(tmux_option_or_fallback "@sessionx-bind-tree-mode" "ctrl-t")
  bind_window_mode=$(tmux_option_or_fallback "@sessionx-bind-window-mode" "ctrl-x")

  bind_kill_session=$(tmux_option_or_fallback "@sessionx-bind-kill-session" "ctrl-w")

  bind_exit=$(tmux_option_or_fallback "@sessionx-bind-abort" "esc")
  bind_accept=$(tmux_option_or_fallback "@sessionx-bind-accept" "enter")
  bind_delete_char=$(tmux_option_or_fallback "@sessionx-bind-delete-char" "bspace")

  bind_scroll_up=$(tmux_option_or_fallback "@sessionx-bind-scroll-up" "ctrl-p")
  bind_scroll_down=$(tmux_option_or_fallback "@sessionx-bind-scroll-down" "ctrl-d")

  bind_select_up=$(tmux_option_or_fallback "@sessionx-bind-select-up" "ctrl-n")
  bind_select_down=$(tmux_option_or_fallback "@sessionx-bind-select-down" "ctrl-m")
}

input() {
    default_window_mode=$(tmux_option_or_fallback "@sessionx-window-mode" "off")
    if [[ "$default_window_mode" == "on" ]]; then
        (tmux list-windows -a -F '#{session_name}:#{window_index}')
    else
        (tmux list-sessions -F | sed -E 's/:.*$//')  || echo "$CURRENT"
    fi
}

additional_input() {
    sessions=$(tmux list-sessions | sed -E 's/:.*$//')
    custom_paths=$(tmux_option_or_fallback "@sessionx-custom-paths" "")
    list=()
    if [[ -z "$custom_paths" ]]; then
        echo ""
    else
        for i in ${custom_paths//,/ }; do
            if [[ $sessions == *"${i##*/}"* ]]; then
                continue
              fi
              list+=("${i}\n")
            last=$i
        done
        unset 'list[${#list[@]}-1]'
        list+=("${last}")
        echo "${list[@]}"
    fi
}

handle_output() {
    target=$(echo "$1" | tr -d '\n')

    # Create new session if the selected name does not exist
    if ! tmux has-session -t="$target" 2> /dev/null; then
	    if [ -n "$target" ]; then
		    tmux new-session -d -s "$target"
	    else
		    echo "No session name provided. Exiting."
	    fi
    fi

    # Attach if outside tmux, switch if inside
    if [[ -z $TMUX ]]; then
	    # If not within tmux, attach
	    tmux attach -t "$target"
    else
	    # If within tmux, switch
	    tmux switch-client -t "$target"
    fi
}

handle_args() {
    INPUT=$(input)
    ADDITIONAL_INPUT=$(additional_input)
    if [[ -n $ADDITIONAL_INPUT ]]; then
        INPUT="$(additional_input)\n$INPUT"
    fi
    Z_MODE=$(tmux_option_or_fallback "@sessionx-zoxide-mode" "off")
    CONFIGURATION_PATH=$(tmux_option_or_fallback "@sessionx-x-path" "$HOME/.config")

    TREE_MODE="$bind_tree_mode:change-preview(~/Scripts/preview -t {1})"
    WINDOWS_MODE="$bind_window_mode:reload(tmux list-windows -a -F '#{session_name}:#{window_index}')+change-preview(~/Scripts/preview -w {1})"

    KILL_SESSION="$bind_kill_session:execute(tmux kill-session -t {})+reload(tmux list-sessions | sed -E 's/:.*$//' | grep -v $(tmux display-message -p '#S'))"

    ACCEPT="$bind_accept:replace-query+print-query"
    DELETE="$bind_delete_char:backward-delete-char"
    EXIT="$bind_exit:abort"

    SELECT_UP="$bind_select_up:up"
    SELECT_DOWN="$bind_select_down:down"
    SCROLL_UP="$bind_scroll_up:preview-half-page-up"
    SCROLL_DOWN="$bind_scroll_down:preview-half-page-down"

    RENAME_SESSION='ctrl-r:execute(printf >&2 "New name: ";read name; tmux rename-session -t {} ${name};)+reload(tmux list-sessions | sed -E "s/:.*$//")'

    HEADER="$bind_accept=󰿄  $bind_kill_session=󱂧  ctrl-r=󰑕   $bind_window_mode=   $bind_tree_mode=󰐆   $bind_scroll_up=  $bind_scroll_down= "


    args=(
        --bind "$TREE_MODE" \
        --bind "$WINDOWS_MODE" \
        --bind "$KILL_SESSION" \
        --bind "$DELETE" \
        --bind "$EXIT" \
        --bind "$SELECT_UP" \
        --bind "$SELECT_DOWN" \
        --bind "$ACCEPT" \
        --bind "$SCROLL_UP" \
        --bind "$SCROLL_DOWN" \
        --bind "$RENAME_SESSION" \
        --bind '?:toggle-preview' \
        --bind 'change:first' \
        --exit-0 \
        --header="$HEADER" \
        --preview="~/Scripts/preview ${PREVIEW_OPTIONS} {}" \
        --preview-window="${preview_location},${preview_ratio},," \
        --pointer='▶' \
        -p "$window_width,$window_height" \
        --print-query \
        --tac \
        --scrollbar '▌▐'\
        )

    legacy=$(tmux_option_or_fallback "@sessionx-legacy-fzf-support" "off")
    if [[ "${legacy}" == "off" ]]; then
        args+=(--border-label "Current session: \"$CURRENT\" ")
        args+=(--bind 'focus:transform-preview-label:echo [ {} ]')
    fi

}

run() {
    preview_settings
    window_settings
    handle_binds
    handle_args
    RESULT=$(echo -e "${INPUT// /}" | fzf-tmux "${args[@]}")
}

run
handle_output "$RESULT"

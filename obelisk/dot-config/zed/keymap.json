// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // Set menu key bindings
  {
    "bindings": {
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-j": "menu::SelectNext",
      "ctrl-l": "menu::Confirm",
      "ctrl-h": "menu::Cancel"
    }
  },
  // Shortcuts for inline completion (ghost text)
  {
    "context": "Editor && vim_mode == insert && edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-l": "editor::AcceptEditPrediction",
      "ctrl-shift-l": "editor::AcceptPartialEditPrediction"
    }
  },
  // Shortcuts for dropdown completion
  {
    // "context": "Editor && vim_mode == insert && showing_completions",
    "context": "Editor && (vim_mode == insert || vim_mode == normal) && (showing_code_actions || showing_completions)",
    "use_key_equivalents": true,
    "bindings": {
      "enter": "editor::ConfirmCompletion",
      "tab": "editor::ComposeCompletion",
      "shift-j": "editor::ContextMenuNext", // TODO: Figure out how to use ctrl instead of shift
      "shift-k": "editor::ContextMenuPrevious" // TODO: Figure out how to use ctrl instead of shift
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode

      // Vim remaps
      "w": ["workspace::SendKeystrokes", "v i w"],
      "W": ["workspace::SendKeystrokes", "v i W"],
      "g f": "editor::OpenExcerpts",

      // Window movement bindings
      // Ctrl jklk to move between panes
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",

      // +Git
      // Git prev/next hunk
      "ç": "editor::GoToHunk",
      "Ç": "editor::GoToPreviousHunk",

      // Shift/ctlr key combos
      // Close active panel
      "shift-k": "editor::Hover",
      "ctrl-q": "pane::CloseAllItems",

      // LEADER KEY STUFF
      // Open menu
      "space space": ["workspace::SendKeystrokes", ":"],
      // Save file
      "space w": "workspace::Save",
      // Diagnostic
      "space d": "diagnostics::Deploy",
      // File finder
      "space f": "file_finder::Toggle",
      // Buffer finder
      "space b": "tab_switcher::Toggle",
      // Project search
      "space /": "pane::DeploySearch",
      // Toggle comment
      "space c": "editor::ToggleComments",
      // Show project panel with current file
      "space o": "workspace::ToggleLeftDock",
      // Split pane vertically
      "space s": "pane::SplitVertical",
      // Zoom current buffer
      "space z": "workspace::ToggleZoom",
      // Terminal
      "space m": "terminal_panel::ToggleFocus",
      // LSP stuff - https://gist.github.com/adibhanna/896257e6c2c501186221312fd9fd1b9c
      "space l a": "editor::ToggleCodeActions",
      "space l r": "editor::Rename",
      "space l f": "editor::Format",
      "space l l": "diagnostics::Deploy"
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      // Toggle comment
      "space c": "editor::ToggleComments",

      // Move selected lines
      "shift-j": "editor::MoveLineDown",
      "shift-k": "editor::MoveLineUp",

      // Indentation
      "tab": "editor::Indent",
      "shift-tab": "editor::Outdent"
    }
  },
  // Better escape
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "ctrl-g": "vim::NormalBefore",
      "j j": "vim::NormalBefore" // remap jj in insert mode to escape
    }
  },
  // Terminal
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-z": "workspace::ToggleZoom",
      "ctrl-q": "pane::CloseAllItems",
      "escape": "pane::CloseAllItems"
    }
  },
  // menu
  {
    "context": "menu",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // File panel (netrw)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      // Close project panel as project file panel on the right
      "q": "workspace::ToggleRightDock",
      "space e": "workspace::ToggleRightDock",
      // Navigate between panel
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  }
  // Panel nagivation
  // {
  //   "context": "Dock",
  //   "bindings": {
  //     "h": ["workspace::ActivatePaneInDirection", "Left"],
  //     "l": ["workspace::ActivatePaneInDirection", "Right"],
  //     "k": ["workspace::ActivatePaneInDirection", "Up"],
  //     "j": ["workspace::ActivatePaneInDirection", "Down"]
  //   }
  // }
,
  {
    "context": "(((Editor && vim_mode == normal) && !VimWaiting) && !menu)",
    "bindings": {
      "shift-Ç": "editor::GoToPreviousHunk"
    }
  }
]
